name: Build

on:
  push:
    branches:
      - main
      - dev

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_DIR: build/test/integration

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DPYPP_BUILD_TESTS=ON -B ${{ github.workspace }}/build/${{ env.BUILD_TYPE }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{ github.workspace }}/build/${{ env.BUILD_TYPE }}

#      - name: Test
#        working-directory: ${{github.workspace}}/build
#        # Execute tests defined by the CMake configuration.
#        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Unit tests
        run: build/${{ env.BUILD_TYPE }}/test/unit/test_pypp

      - name: Install
        run: sudo cmake --install ${{ github.workspace }}/build/${{ env.BUILD_TYPE }}

      - name: Configure integration tests
        run: cmake -DCMAKE_BUILD_TYPE=Release -B ${{ env.BUILD_DIR }} -S test/integration

      - name: Build integration tests
        run: cmake --build ${{ env.BUILD_DIR }}

      - name: Run integration tests
        run: ${{ env.BUILD_DIR }}/test_pypp
